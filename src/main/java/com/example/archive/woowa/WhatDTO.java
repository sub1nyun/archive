package com.example.archive.woowa;

public class WhatDTO {

    // DTO란 Data Transfer Object의 약자로 -> 계층 간 데이터 전송을 위해 도메인 모델 대신 사용되는 객체이다

    /*
        DTO는 순수하게 데이터를 저장하고, 데이터에 대한 getter, setter 만을 가져야한다고 한다.
        위키피디아에 따르면 DTO는 어떠한 비즈니스 로직을 가져서는 안되며, 저장, 검색, 직렬화, 역직렬화 로직만을 가져야 한다고 한다.
     */



    // 1. 도메인 대신 DTO를 사용하면 좋은 이유

    /*
        DTO 대신 도메인 모델을 계층간 전달에 사용하면, UI 계층에서 도메인 모델의 메소드를 호출하거나 상태를 변경시킬 수 있다.
        또한 UI화면마다 사용하는 도메인 모델의 정보는 상이하다. 하지만 도메인 모델은 UI에 필요하지 않은 정보까지 가지고 있다.
        이런 모든 도메인 모델 속성이 외부에 노출되면 보안 문제가 발생할 수 있다. 즉, 도메인 모델을 캡슐화 하여 보호할 수 있다.
        또한 도메인 모델을 계층간 전송에 사용하면, 모델과 뷰가 강하게 결합될 수 있다.
        뷰의 요구사항 변화로 도메인의 코드를 변경해야할 일이 생기는 것은 좋지 않다.
        DTO를 사용하면 이 결합을 느슨하게 만들 수 있다.
     */

    // 2. DTO는 어떤 계층까지 사용되어야 할까?

    //일단, DTO가 영속 계층(Persistence Layer)까지 도달하는 것은 공통적으로 지양하는 모양이다. 그렇다면, Controller 와 Service 레이어 둘 중 DTO는 어디서 변환되어야 할까?

    /*
        마틴파울러는 Service Layer 란 어플리케이션의 비즈니스 로직 즉, 도메인을 보호하는 레이어라고 말한다.
        즉, 이 정의를 명확히 지키기 위해서는 Presentation Layer 에 도메인을 노출해서는 안된다.
        따라서 이러한 관점으로는 도메인은 서비스 레이어에서 DTO로 변환되어 컨트롤러로 전달되어야 한다.
     */
}
