package com.example.archive.woowa;

public class RestAPI {

        // 1. API 란?

    /*
        API는 Application Programming Interface의 약자로, 소프트웨어간의 응답과 요청을 통한 데이터 통신을 위한 방법과 규칙을 의미한다.
        API는 OS에서도 제공 (e.g. Windows API) 할 수 있고, 프로그래밍 언어 (e.g. Java API) 에서도 제공할 수 있고,
        웹 애플리케이션 (e.g. Facebook API) 에서도 제공할 수 있다.
        웹 프로그래밍 맥락에서는 주로 웹 애플리케이션에서 제공하는 API를 주로 의미한다.
        앞으로 이 포스팅에서 API라고 부르는 것은 웹 프로그래밍 맥락에서의 웹 API를 의미한다.
        API는 주로 서버와 클라이언트 관점에서 설명된다.
        클라이언트는 요청을 보내고, 서버는 요청에 응답한다.
        웹 API는 SOAP API, RPC API, Websocket API, REST API등이 있는데 이 문서에서는 REST API 에 대해서 다룬다.
     */

    // 2. REST API 란?

    /*
        REST API는 Representaional State Transfer API의 약자로써,
        REST 아키텍처의 제약 조건을 준수하는 API 를 의미한다. 이 REST 제약 조건을 잘 준수함을 RESTful 하다고 표현한다.
        그렇다면, REST는 무엇일까? REST는 표준 혹은 프로토콜 같은 것이 아니라,
        일반적으로 통용되는 규약이다. 따라서 아래의 내용은 정답이 아니라 일반적으로 권고되는 규칙이란 점을 참고하자.
        REST는 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용하는 아키텍처이다.
        또한 REST API 는 Stateless 하게 동작한다. 각 HTTP 요청은 서로 연관되지 않고 독립적이어야 한다.
        따라서 요청과 요청 사이에 일시적으로 저장되는 상태가 없어야한다.
     */

    // 3. REST API의 구성요소

    /*
        자원(Resource)
          REST API는 HTTP의 URI를 사용해 자원을 명시한다. 이때 리소스란 클라이언트에서 접근할 수 있는 모든 개체, 데이터, 서비스가 포함된다.

        행위(Verb)
         REST API는 HTTP의 Method (POST, GET, PUT, PATCH, DELETE 등) 사용하여
         명시된 자원에 대한 CRUD(Create, Read, Update, Delete) 명령을 실행한다.

        표현(Representaion)
         REST API에서 리소스는 다양한 형태로 표현될 수 있다. 가장 많이 사용되는 형태는 JSON이고, XML, TEXT, RSS 등의 표현이 존재한다.

     */

    // 4. 리소스 중심 디자인

    /*
    그리고 REST API는 리소스 중심으로 디자인 된다. 즉, REST API는 비즈니스 엔티티에 집중해야한다.
    만드는 서비스가 이커머스라면 비즈니스 엔티티는 고객, 주문, 상품 등이 될 것이다.
    리소스는 각각을 고유하게 식별하는 URI가 존재한다. 예를 들어 어떤 블로그 서비스의 특정 포스트 리소스는 아래와 같은 URI로 표현할 수 있다.
       -> https://some-blog-service.com/posts/1
     */

    // 5. HTTP 메서드에 따른 API 작업 정의
    // RESTful 하게 구현된 REST API는 HTTP 메서드를 아래와 같은 행위에 맞도록 디자인한다.

    /*
        GET
            명시된 URI에 해당하는 리소스를 가져온다.
            일반적으로 HTTP 상태 코드 200을 반환하고, 리소스를 찾을 수 없을 경우 404를 반환한다.
            요청은 정상적으로 처리되었지만, 보여줄 데이터가 없을 경우 (예를 들어 검색결과가 없을 경우) 204를 반환한다.

        POST
            명시된 URI에 새 리소스를 생성한다.
            리소스가 성공적으로 생성되었을 경우 HTTP 상태 코드 201을 반환하고,
            반환할 결과가 딱히 없을 경우 204를 반환한다. 리소스를 생성할 때
            클라이언트가 잘못된 요청을 전송했을 경우 (예를 들어 양수여야 하는 필드를 음수로 전달한 경우) 400을 반환한다.

        PUT
            명시된 URI를 새 리소스로 대체하거나, 없다면 새로운 리소스를 생성한다.

        PATCH
            명시된 URI에 해당하는 리소스의 일부분을 업데이트한다.

        # PATCH는 앞서 이야기한 PUT과 비슷해 보이는데, 어떤 차이점이 존재할까?
        PUT은 리소스의 모든 정보를 업데이트 한다. 즉 새로운 리소스로 대체한다. 하지만,
         PATCH는 리소스의 일부분만을 업데이트 한다는 차이점이 존재한다.

       DELETE
            지정된 URI에 해당하는 리소스를 제거한다.
            삭제가 성공하면 응답으로 빈 본문을 반환하고, HTTP 상태 코드 204를 반환한다.
            존재하지 않는 리소스에 요청한 경우 404를 반환한다.
     */

    // 6. 좋은 URI 설계를 위한 여러가지 규칙

    /*
        URI의 맨 뒤에는 / 가 붙지 않는다.
        즉, /posts 와 /posts/ 는 동일한 리소스를 가리킨다.

        계층적 관계를 나타낼 때 / 를 사용한다.
        /posts/1/comments 는 포스팅 컬렉션, 개별 포스팅 개체, 개별 포스팅의 코멘트 컬렉션을 계층적으로 나타낸다.

        밑줄(_)을 사용하지 않는다. 대신, 가독성을 위해 하이픈(-) 을 사용한다.
        /best_posts 대신 /best-posts 로 표현하자.

        대소문자를 섞어 쓰지 않고, 소문자만을 사용한다.
        URI에 파일 확장자를 포함하지 않는다.
        행위는 URI에 표기하지 않는다. URI는 동사가 아니라 명사를 기반으로 디자인 해야한다.
        즉, 리소스에 대한 작업이 아니라 대상 리소스를 중심으로 디자인한다.

        https://some-blog-service.com/posts // 좋음
        https://some-blog-service.com/create-post // 좋지 않음
     */
}
