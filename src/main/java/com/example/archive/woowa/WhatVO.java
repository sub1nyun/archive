package com.example.archive.woowa;

public class WhatVO {

    /*
        VO(Value Object)
        VO (한국어로는 값 객체) 는 도메인에서 한 개 또는 그 이상의 속성들을 묶어서 특정 값을 나타내는 객체이다.
        이때 특정 값의 예시로 나이, 금액과 같이 정수 하나로 표현할 수 있는 값과 X값, Y값의 쌍으로 표현되는 2차원 좌표, 시작 날짜와 끝 날짜로 이루어진 기간등을 들 수 있을 것 이다.
     */



    // VO의 제약사항
    // 크게 아래의 3가지 제약사항이 존재한다.

    /*
        1. 불변성 (Immutable)
            VO는 수정자(Setter) 메소드를 가지지 않는다. 즉, VO는 불변하다.
            불변성을 갖기 때문에 VO는 언제, 어디서 호출이 되던 값이 변경되었을 걱정을 할 필요가 없다.
            따라서 안심하고 객체를 공유할 수 있다. 예를 들어, DB에서 값을 가져와 데이터를 VO에 담는다면 항상 VO의 값을 원본으로써 신뢰할 수 있다.
            이러한 특징 때문에 계층간 데이터를 전송할 때 DTO 대신 VO를 전송할 수도 있다.

        2. 동등성 (Equality)
            두 객체가 실제 다른 객체이더라도 즉, 동일성(Identity)를 갖지 않더라도 논리적으로 표현하는 값이 같다면 동등성(Equality)를 갖는다.
            내 지갑에 있는 만원권 지폐와 친구 지갑에 있는 만원권 지폐는 엄연하게 서로 다른 물체이지만, 동등한 가치를 지니므로 논리적으로 동등하다고 할 수 있다.

        3. 자가 유효성 검사 (Self-Validation)
            원시 타입을 사용하면, 값의 유효성을 사용하는 측에서 검사해야한다. 이는 'Primitive Obsession' 문단에서 언급한 나이 값을 원시 값을 통하여 표현했을 때 발생하는 문제와 같다.
            VO는 자가 유효성 검사라는 특징을 갖는다. 모든 유효성 검사는 생성 시간에 이루어져야 하며, 따라서 유효하지 않는 값으로 VO를 생성할 수 없다.
            따라서 VO를 사용하는 클라이언트는 도메인 규칙이 깨진다는 염려 없이 심리적 안정감을 갖고 값을 다룰 수 있다.


            # DTO와 다른 점
             - DTO는 이름 그대로 Data Transfer Object 즉, 계층간 데이터 '전송'을 뒤하여 만들어진 객체이다.
                DTO는 꼭 불변일 필요가 없으며 setter를 허용하고
                서로 다른 두 DTO가 동일한 값을 가지고 있다고해도 동등성을 갖지 않는다.

                정리하자면 DTO는 데이터가 여러 레이어를 거쳐가며 혹시 모를 변경으로부터 도메인 객체를 보호하기 위해 별도로 생성하여 사용하는 '전송용' 객체이다.
                그에 반해 VO는 도메인에서 의미있는 값 그 자체를 표현하기 위해 사용하는 객체이므로 이를 혼동해서는 안되겠다.

     */
}
